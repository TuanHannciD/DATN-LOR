// <auto-generated />
using System;
using AuthDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthDemo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthDemo.Models.Admin", b =>
                {
                    b.Property<string>("HoTenAdmin")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AnhDaiDien")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sdt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HoTenAdmin");

                    b.HasIndex("UserName");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            HoTenAdmin = "Admin Demo",
                            AnhDaiDien = "avatar.png",
                            DiaChi = "Hà Nội",
                            Email = "admin@gmail.com",
                            NgaySinh = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sdt = "0123456789",
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.AnhSp", b =>
                {
                    b.Property<Guid>("ID_AnhSp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileAnh")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ID_Spct")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_AnhSp");

                    b.HasIndex("ID_Spct");

                    b.ToTable("AnhSps");

                    b.HasData(
                        new
                        {
                            ID_AnhSp = new Guid("11111111-1111-1111-1111-111111111111"),
                            FileAnh = "ao_thun_do_s_1.jpg",
                            ID_Spct = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
                        },
                        new
                        {
                            ID_AnhSp = new Guid("22222222-2222-2222-2222-222222222222"),
                            FileAnh = "ao_thun_do_s_2.jpg",
                            ID_Spct = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee")
                        },
                        new
                        {
                            ID_AnhSp = new Guid("33333333-3333-3333-3333-333333333333"),
                            FileAnh = "quan_jean_xanh_m_1.jpg",
                            ID_Spct = new Guid("bbbbbbbb-cccc-dddd-eeee-ffffffffffff")
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.BaoCao", b =>
                {
                    b.Property<Guid>("ID_BaoCao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("DoanhThu")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("HoTenAdmin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LoaiBaoCao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("NgayBaoCao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayCapNhap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("NgayTao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("SoKhachHangMoi")
                        .HasColumnType("int");

                    b.Property<int?>("SoKhachHangTroLai")
                        .HasColumnType("int");

                    b.Property<int?>("SoLuongDonHangBiHuy")
                        .HasColumnType("int");

                    b.Property<int?>("SoLuongDonHangDangXuLy")
                        .HasColumnType("int");

                    b.Property<int?>("SoLuongDonHangHoanThanh")
                        .HasColumnType("int");

                    b.Property<int?>("SoLuongHangBanRa")
                        .HasColumnType("int");

                    b.Property<int?>("SoLuongHangTon")
                        .HasColumnType("int");

                    b.Property<int?>("TongSoDonHang")
                        .HasColumnType("int");

                    b.Property<int?>("TongSoKhachHang")
                        .HasColumnType("int");

                    b.HasKey("ID_BaoCao");

                    b.HasIndex("HoTenAdmin");

                    b.ToTable("BaoCaos", t =>
                        {
                            t.HasCheckConstraint("CK_BaoCao_DoanhThu", "DoanhThu >= 0");

                            t.HasCheckConstraint("CK_BaoCao_LoaiBaoCao", "LoaiBaoCao IN (N'DoanhSo', N'HangTon', N'DonHang', N'KhachHang')");

                            t.HasCheckConstraint("CK_BaoCao_SoKhachHangMoi", "SoKhachHangMoi >= 0");

                            t.HasCheckConstraint("CK_BaoCao_SoKhachHangTroLai", "SoKhachHangTroLai >= 0");

                            t.HasCheckConstraint("CK_BaoCao_SoLuongDonHangBiHuy", "SoLuongDonHangBiHuy >= 0");

                            t.HasCheckConstraint("CK_BaoCao_SoLuongDonHangDangXuLy", "SoLuongDonHangDangXuLy >= 0");

                            t.HasCheckConstraint("CK_BaoCao_SoLuongDonHangHoanThanh", "SoLuongDonHangHoanThanh >= 0");

                            t.HasCheckConstraint("CK_BaoCao_SoLuongHangBanRa", "SoLuongHangBanRa >= 0");

                            t.HasCheckConstraint("CK_BaoCao_SoLuongHangTon", "SoLuongHangTon >= 0");

                            t.HasCheckConstraint("CK_BaoCao_TongSoDonHang", "TongSoDonHang >= 0");

                            t.HasCheckConstraint("CK_BaoCao_TongSoKhachHang", "TongSoKhachHang >= 0");
                        });

                    b.HasData(
                        new
                        {
                            ID_BaoCao = new Guid("cccccccc-dddd-eeee-ffff-111111111111"),
                            DoanhThu = 10000000.0m,
                            HoTenAdmin = "Admin Demo",
                            LoaiBaoCao = "DoanhSo",
                            NgayBaoCao = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayCapNhap = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayTao = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoKhachHangMoi = 20,
                            SoKhachHangTroLai = 180,
                            SoLuongDonHangBiHuy = 5,
                            SoLuongDonHangDangXuLy = 15,
                            SoLuongDonHangHoanThanh = 80,
                            SoLuongHangBanRa = 500,
                            SoLuongHangTon = 2000,
                            TongSoDonHang = 100,
                            TongSoKhachHang = 200
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.ChatLieu", b =>
                {
                    b.Property<Guid>("ID_ChatLieu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatLieuName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_ChatLieu");

                    b.ToTable("ChatLieus");

                    b.HasData(
                        new
                        {
                            ID_ChatLieu = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            ChatLieuName = "Cotton"
                        },
                        new
                        {
                            ID_ChatLieu = new Guid("8a9b0c1d-2e3f-4a5b-6c7d-8e9f0a1b2c3d"),
                            ChatLieuName = "Len"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.DonHang", b =>
                {
                    b.Property<Guid>("ID_Don_Hang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaNV")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Don_Hang");

                    b.HasIndex("MaNV");

                    b.ToTable("DonHangs");

                    b.HasData(
                        new
                        {
                            ID_Don_Hang = new Guid("55555555-5555-5555-5555-555555555555"),
                            MaNV = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c")
                        },
                        new
                        {
                            ID_Don_Hang = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c"),
                            MaNV = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c")
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.Don_Hang_Thanh_Toan", b =>
                {
                    b.Property<Guid>("ID_Don_Hang_Thanh_Toan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Don_Hang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_ThanhToan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KieuTT")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("NgayTT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_Don_Hang_Thanh_Toan");

                    b.HasIndex("ID_Don_Hang");

                    b.HasIndex("ID_ThanhToan");

                    b.ToTable("Don_Hang_Thanh_Toans");

                    b.HasData(
                        new
                        {
                            ID_Don_Hang_Thanh_Toan = new Guid("11111111-aaaa-bbbb-cccc-555555555555"),
                            ID_Don_Hang = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c"),
                            ID_ThanhToan = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            KieuTT = "Tiền mặt",
                            NgayTT = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Hoàn thành"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.GiaoHang", b =>
                {
                    b.Property<Guid>("ID_GiaoHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ID_Don_Hang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_ThanhToan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("NgayCapNhap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("NgayPhanCongGiaoHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("NgayTao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ThoiGianDuKienGiaoHang")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThoiGianThucTeGiaoHang")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrangThaiGiaoHang")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_GiaoHang");

                    b.HasIndex("ID_Don_Hang");

                    b.HasIndex("ID_ThanhToan");

                    b.ToTable("GiaoHangs", t =>
                        {
                            t.HasCheckConstraint("CK_GiaoHang_TrangThaiGiaoHang", "TrangThaiGiaoHang IN (N'Chưa phân công', N'Đang giao', N'Đã giao', N'Đang xử lý', N'Đang chờ giao hàng', N'Gặp sự cố', N'Bị hủy', N'Giao lại')");
                        });

                    b.HasData(
                        new
                        {
                            ID_GiaoHang = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            ID_Don_Hang = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c"),
                            ID_ThanhToan = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            NgayCapNhap = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayPhanCongGiaoHang = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayTao = new DateTime(2025, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ThoiGianDuKienGiaoHang = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrangThaiGiaoHang = "Đang xử lý"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.Gio_Hang", b =>
                {
                    b.Property<Guid>("ID_Gio_Hang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Gio_Hang");

                    b.HasIndex("ID_User");

                    b.ToTable("Gio_Hangs");

                    b.HasData(
                        new
                        {
                            ID_Gio_Hang = new Guid("b2c7d81c-7d81-4e9c-8e0a-0a4a8b0e7a2b"),
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b")
                        },
                        new
                        {
                            ID_Gio_Hang = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b"),
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b")
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.Gio_Hang_Chi_Tiet", b =>
                {
                    b.Property<Guid>("ID_Gio_Hang_Chi_Tiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Gia")
                        .HasColumnType("real");

                    b.Property<Guid>("ID_Gio_Hang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Spct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Ma_Km")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SoLuong")
                        .HasColumnType("real");

                    b.HasKey("ID_Gio_Hang_Chi_Tiet");

                    b.HasIndex("ID_Gio_Hang");

                    b.HasIndex("ID_Spct");

                    b.HasIndex("Ma_Km");

                    b.ToTable("Gio_Hang_Chi_Tiets");

                    b.HasData(
                        new
                        {
                            ID_Gio_Hang_Chi_Tiet = new Guid("66666666-6666-6666-6666-666666666666"),
                            Gia = 150000f,
                            ID_Gio_Hang = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b"),
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            Ma_Km = new Guid("f8e1d2c3-b4a5-6d7e-8c9b-0a1b2c3d4e5f"),
                            SoLuong = 1f
                        },
                        new
                        {
                            ID_Gio_Hang_Chi_Tiet = new Guid("77777777-7777-7777-7777-777777777777"),
                            Gia = 450000f,
                            ID_Gio_Hang = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b"),
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            SoLuong = 2f
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.HangSX", b =>
                {
                    b.Property<Guid>("ID_Hang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HangSXName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_Hang");

                    b.ToTable("HangSXs");

                    b.HasData(
                        new
                        {
                            ID_Hang = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6e"),
                            HangSXName = "Nike"
                        },
                        new
                        {
                            ID_Hang = new Guid("f1e2d3c4-b5a6-9d8e-7c6b-5a4d3c2b1a0e"),
                            HangSXName = "Adidas"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.HoTroKhachHang", b =>
                {
                    b.Property<Guid>("ID_HoTroKhachHang")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoaiHT")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MaNV")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PTLienLac")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_HoTroKhachHang");

                    b.HasIndex("ID_User");

                    b.HasIndex("MaNV");

                    b.ToTable("HoTroKhachHangs");

                    b.HasData(
                        new
                        {
                            ID_HoTroKhachHang = new Guid("88888888-8888-8888-8888-888888888888"),
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b"),
                            LoaiHT = "Hỗ trợ kỹ thuật",
                            MaNV = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c"),
                            PTLienLac = "Email"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.HoaDon", b =>
                {
                    b.Property<Guid>("ID_HoaDon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_HoaDon");

                    b.HasIndex("ID_User");

                    b.ToTable("HoaDons");

                    b.HasData(
                        new
                        {
                            ID_HoaDon = new Guid("c3c7d81c-7d81-4e9c-8e0a-0a4a8b0e7a2b"),
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b")
                        },
                        new
                        {
                            ID_HoaDon = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b")
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.KhachHang", b =>
                {
                    b.Property<string>("HoTen")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DiemTichLuy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GioiTinh")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HoTenAdmin")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LoaiKhachHang")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("NgayDangKy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sdt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HoTen");

                    b.HasIndex("HoTenAdmin");

                    b.HasIndex("UserName");

                    b.ToTable("KhachHangs", t =>
                        {
                            t.HasCheckConstraint("CK_KhachHang_DiemTichLuy", "DiemTichLuy >= 0");

                            t.HasCheckConstraint("CK_KhachHang_Email", "Email LIKE N'%_@gmail.com'");

                            t.HasCheckConstraint("CK_KhachHang_GioiTinh", "GioiTinh IN (N'Nam', N'Nữ', N'Khác')");

                            t.HasCheckConstraint("CK_KhachHang_HoTen", "HoTen LIKE N'%[^a-zA-Z]% '");

                            t.HasCheckConstraint("CK_KhachHang_LoaiKhachHang", "LoaiKhachHang IN (N'VIP', N'Thường', N'Mới')");

                            t.HasCheckConstraint("CK_KhachHang_NgaySinh", "NgaySinh <= GETDATE()");

                            t.HasCheckConstraint("CK_KhachHang_TrangThai", "TrangThai IN (N'Hoạt động', N'Không hoạt động', N'Bị cấm')");
                        });

                    b.HasData(
                        new
                        {
                            HoTen = "Tran Thi B ",
                            DiaChi = "Hà Nội",
                            DiemTichLuy = 0,
                            Email = "khachhangB@gmail.com",
                            GioiTinh = "Nữ",
                            HoTenAdmin = "Admin Demo",
                            LoaiKhachHang = "Thường",
                            NgayDangKy = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgaySinh = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sdt = "0987654321",
                            TrangThai = "Hoạt động",
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.KhuyenMai", b =>
                {
                    b.Property<Guid>("Ma_Km")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GiaTriKm")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("HoTenAdmin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LoaiKm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoTa")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("NgayBd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayKt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SoLuong")
                        .HasColumnType("int");

                    b.Property<int?>("SoLuong1Ng")
                        .HasColumnType("int");

                    b.Property<string>("TenKm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Ma_Km");

                    b.HasIndex("HoTenAdmin");

                    b.ToTable("KhuyenMais", t =>
                        {
                            t.HasCheckConstraint("CK_KhuyenMai_GiaTriKm", "GiaTriKm > 0");

                            t.HasCheckConstraint("CK_KhuyenMai_LoaiKm", "LoaiKm IN (N'Phần trăm', N'Số tiền cố định', N'Miễn phí giao hàng')");

                            t.HasCheckConstraint("CK_KhuyenMai_SoLuong", "SoLuong >= 0");

                            t.HasCheckConstraint("CK_KhuyenMai_SoLuong1Ng", "SoLuong1Ng >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Ma_Km = new Guid("dddddddd-eeee-ffff-1111-222222222222"),
                            GiaTriKm = 10.0m,
                            HoTenAdmin = "Admin Demo",
                            LoaiKm = "Phần trăm",
                            MoTa = "Giảm 10% cho tất cả sản phẩm",
                            NgayBd = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayKt = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoLuong = 1000,
                            SoLuong1Ng = 100,
                            TenKm = "Giảm giá mùa hè"
                        },
                        new
                        {
                            Ma_Km = new Guid("eeeeeeee-ffff-1111-2222-333333333333"),
                            GiaTriKm = 12m,
                            HoTenAdmin = "Admin Demo",
                            LoaiKm = "Miễn phí giao hàng",
                            MoTa = "Miễn phí giao hàng cho đơn hàng trên 500k",
                            NgayBd = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayKt = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoLuong = 500,
                            SoLuong1Ng = 50,
                            TenKm = "Miễn phí vận chuyển"
                        },
                        new
                        {
                            Ma_Km = new Guid("f8e1d2c3-b4a5-6d7e-8c9b-0a1b2c3d4e5f"),
                            GiaTriKm = 50000.0m,
                            HoTenAdmin = "Admin Demo",
                            LoaiKm = "Số tiền cố định",
                            MoTa = "Voucher giảm 50k cho đơn hàng trên 300k",
                            NgayBd = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayKt = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoLuong = 100,
                            SoLuong1Ng = 5,
                            TenKm = "Tặng voucher đặc biệt"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.MauSac", b =>
                {
                    b.Property<Guid>("ID_MauSac")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MauSacName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_MauSac");

                    b.ToTable("MauSacs");

                    b.HasData(
                        new
                        {
                            ID_MauSac = new Guid("b1a7e8c2-3f4d-4e6a-9b2c-1a2b3c4d5e6f"),
                            MauSacName = "Đỏ"
                        },
                        new
                        {
                            ID_MauSac = new Guid("22334455-6677-8899-aabb-ccddeeff2233"),
                            MauSacName = "Xanh"
                        },
                        new
                        {
                            ID_MauSac = new Guid("11111111-2222-3333-4444-555555555555"),
                            MauSacName = "Đen"
                        },
                        new
                        {
                            ID_MauSac = new Guid("66666666-7777-8888-9999-aaaaaaaaaaaa"),
                            MauSacName = "Trắng"
                        },
                        new
                        {
                            ID_MauSac = new Guid("11223344-5566-7788-99aa-bbccddeeff11"),
                            MauSacName = "Vàng"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.NCC", b =>
                {
                    b.Property<Guid>("Ma_NCC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HoTenAdmin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MoTa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameNCC")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameNLH")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("QuocGia")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SDT")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThanhPho")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Ma_NCC");

                    b.HasIndex("HoTenAdmin");

                    b.ToTable("NCCs", t =>
                        {
                            t.HasCheckConstraint("CK_NCC_TrangThai", "TrangThai IN (N'Hoạt động', N'Không hoạt động')");
                        });

                    b.HasData(
                        new
                        {
                            Ma_NCC = new Guid("22222222-3333-4444-5555-666666666666"),
                            CreatedDate = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiaChi = "Hà Nội",
                            Email = "nccA@example.com",
                            HoTenAdmin = "Admin Demo",
                            MoTa = "Chuyên cung cấp vải cotton",
                            NameNCC = "Nhà cung cấp A",
                            NameNLH = "Nguyen Van Test",
                            QuocGia = "Việt Nam",
                            SDT = "0123456789",
                            ThanhPho = "Hà Nội",
                            TrangThai = "Hoạt động",
                            UpdatedDate = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.NhanVien", b =>
                {
                    b.Property<Guid>("MaNV")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChucVu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GioiTinh")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HoTenAdmin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HoTenNV")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("LuongCoBan")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayVaoLam")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sdt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SoGioLamViec")
                        .HasColumnType("int");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaNV");

                    b.HasIndex("HoTenAdmin");

                    b.HasIndex("UserName");

                    b.ToTable("NhanViens", t =>
                        {
                            t.HasCheckConstraint("CK_NhanVien_GioiTinh", "GioiTinh IN (N'Nam', N'Nữ', N'Khác')");

                            t.HasCheckConstraint("CK_NhanVien_LuongCoBan", "LuongCoBan > 0");

                            t.HasCheckConstraint("CK_NhanVien_NgaySinh", "NgaySinh <= GETDATE()");

                            t.HasCheckConstraint("CK_NhanVien_SoGioLamViec", "SoGioLamViec >= 0");

                            t.HasCheckConstraint("CK_NhanVien_TrangThai", "TrangThai IN (N'Hoạt động', N'Không hoạt động', N'Bị cấm')");
                        });

                    b.HasData(
                        new
                        {
                            MaNV = new Guid("ffffffff-1111-2222-3333-444444444444"),
                            ChucVu = "Quản lý",
                            DiaChi = "Hà Nội",
                            Email = "nhanvienA@example.com",
                            GioiTinh = "Nam",
                            HoTenAdmin = "Admin Demo",
                            HoTenNV = "Nguyen Van A",
                            LuongCoBan = 15000000m,
                            NgaySinh = new DateTime(1995, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayVaoLam = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sdt = "0987654321",
                            SoGioLamViec = 160,
                            TrangThai = "Hoạt động",
                            UserName = "testuser"
                        },
                        new
                        {
                            MaNV = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2c"),
                            ChucVu = "Nhân viên",
                            DiaChi = "Hà Nội",
                            Email = "nhanvienB@example.com",
                            GioiTinh = "Nam",
                            HoTenAdmin = "Admin Demo",
                            HoTenNV = "Nguyen Van B",
                            LuongCoBan = 12000000m,
                            NgaySinh = new DateTime(1996, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NgayVaoLam = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Sdt = "0912345678",
                            SoGioLamViec = 160,
                            TrangThai = "Hoạt động",
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.SanPham", b =>
                {
                    b.Property<Guid>("ID_Sp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SoLuongTong")
                        .HasColumnType("int");

                    b.Property<string>("Ten_Sp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrangThai")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID_Sp");

                    b.ToTable("SanPhams");

                    b.HasData(
                        new
                        {
                            ID_Sp = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            MoTa = "Áo thun cổ tròn, vải cotton mềm mại.",
                            SoLuongTong = 100,
                            Ten_Sp = "Áo thun cơ bản",
                            TrangThai = "Còn hàng"
                        },
                        new
                        {
                            ID_Sp = new Guid("b1c7d81c-7d81-4e9c-8e0a-0a4a8b0e7a2b"),
                            MoTa = "Quần jean dáng ôm, co giãn tốt.",
                            SoLuongTong = 50,
                            Ten_Sp = "Quần jean slim fit",
                            TrangThai = "Còn hàng"
                        },
                        new
                        {
                            ID_Sp = new Guid("33333333-4444-5555-6666-777777777777"),
                            MoTa = "Giày thể thao thoáng khí, nhẹ nhàng.",
                            SoLuongTong = 75,
                            Ten_Sp = "Giày thể thao A",
                            TrangThai = "Còn hàng"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.SanPhamChiTiet", b =>
                {
                    b.Property<Guid>("ID_Spct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnhDaiDien")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DanhGia")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Gia")
                        .HasColumnType("real");

                    b.Property<Guid?>("ID_ChatLieu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ID_Hang")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ID_MauSac")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ID_Size")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Sp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SoLuongBan")
                        .HasColumnType("int");

                    b.Property<string>("TenSp")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_Spct");

                    b.HasIndex("ID_ChatLieu");

                    b.HasIndex("ID_Hang");

                    b.HasIndex("ID_MauSac");

                    b.HasIndex("ID_Size");

                    b.HasIndex("ID_Sp");

                    b.ToTable("SanPhamChiTiets", t =>
                        {
                            t.HasCheckConstraint("CK_SanPhamChiTiet_Gia", "Gia > 0");

                            t.HasCheckConstraint("CK_SanPhamChiTiet_SoLuongBan", "SoLuongBan >= 0");
                        });

                    b.HasData(
                        new
                        {
                            ID_Spct = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            AnhDaiDien = "ao_thun_do_s.jpg",
                            DanhGia = "Tốt",
                            Gia = 150000f,
                            ID_ChatLieu = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            ID_Hang = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6e"),
                            ID_MauSac = new Guid("11223344-5566-7788-99aa-bbccddeeff11"),
                            ID_Size = new Guid("ffeeddcc-bbaa-9988-7766-554433221100"),
                            ID_Sp = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            MoTa = "Áo thun cổ tròn, vải cotton mềm mại, màu đỏ, size S.",
                            SoLuongBan = 10,
                            TenSp = "Áo thun cơ bản Đỏ S"
                        },
                        new
                        {
                            ID_Spct = new Guid("bbbbbbbb-cccc-dddd-eeee-ffffffffffff"),
                            AnhDaiDien = "quan_jean_xanh_m.jpg",
                            DanhGia = "Tuyệt vời",
                            Gia = 450000f,
                            ID_ChatLieu = new Guid("8a9b0c1d-2e3f-4a5b-6c7d-8e9f0a1b2c3d"),
                            ID_Hang = new Guid("f1e2d3c4-b5a6-9d8e-7c6b-5a4d3c2b1a0e"),
                            ID_MauSac = new Guid("22334455-6677-8899-aabb-ccddeeff2233"),
                            ID_Size = new Guid("eeddccbb-aa99-8877-6655-443322110000"),
                            ID_Sp = new Guid("b1c7d81c-7d81-4e9c-8e0a-0a4a8b0e7a2b"),
                            MoTa = "Quần jean dáng ôm, co giãn tốt, màu xanh, size M.",
                            SoLuongBan = 5,
                            TenSp = "Quần jean slim fit Xanh M"
                        },
                        new
                        {
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            AnhDaiDien = "ao_thun_dac_biet.jpg",
                            DanhGia = "Xuất sắc",
                            Gia = 250000f,
                            ID_ChatLieu = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            ID_Hang = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6e"),
                            ID_MauSac = new Guid("11111111-2222-3333-4444-555555555555"),
                            ID_Size = new Guid("ffeeddcc-bbaa-9988-7766-554433221100"),
                            ID_Sp = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            MoTa = "Áo thun đặc biệt, vải cao cấp, màu đen, size M.",
                            SoLuongBan = 20,
                            TenSp = "Áo thun đặc biệt"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.SanPhamYeuThich", b =>
                {
                    b.Property<Guid>("ID_Spyt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Spyt");

                    b.HasIndex("ID_User");

                    b.ToTable("SanPhamYeuThiches");

                    b.HasData(
                        new
                        {
                            ID_Spyt = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b"),
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b")
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.SanPhamYeuThichChiTiet", b =>
                {
                    b.Property<Guid>("ID_Spyt_Chi_Tiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Gia")
                        .HasColumnType("real");

                    b.Property<Guid>("ID_Spct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Spyt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Spyt_Chi_Tiet");

                    b.HasIndex("ID_Spct");

                    b.HasIndex("ID_Spyt");

                    b.ToTable("SanPhamYeuThichChiTiets");

                    b.HasData(
                        new
                        {
                            ID_Spyt_Chi_Tiet = new Guid("99999999-9999-9999-9999-999999999999"),
                            Gia = 150000f,
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            ID_Spyt = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b")
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.SanPham_Mua", b =>
                {
                    b.Property<Guid>("ID_SP_Mua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Gia")
                        .HasColumnType("real");

                    b.Property<Guid>("ID_Spct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Ma_Km")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SoLuong")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_SP_Mua");

                    b.HasIndex("ID_Spct");

                    b.HasIndex("Ma_Km");

                    b.HasIndex("UserName");

                    b.ToTable("SanPham_Muas");

                    b.HasData(
                        new
                        {
                            ID_SP_Mua = new Guid("44444444-4444-4444-4444-444444444444"),
                            Gia = 150000f,
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            Ma_Km = new Guid("f8e1d2c3-b4a5-6d7e-8c9b-0a1b2c3d4e5f"),
                            SoLuong = 1f,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.SanPham_ThanhToan", b =>
                {
                    b.Property<Guid>("ID_Sp_ThanhToan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Spct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_ThanhToan")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SoLuong")
                        .HasColumnType("real");

                    b.HasKey("ID_Sp_ThanhToan");

                    b.HasIndex("ID_Spct");

                    b.HasIndex("ID_ThanhToan");

                    b.ToTable("SanPham_ThanhToans");

                    b.HasData(
                        new
                        {
                            ID_Sp_ThanhToan = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            ID_ThanhToan = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            SoLuong = 1f
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.Size", b =>
                {
                    b.Property<Guid>("ID_Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_Size");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            ID_Size = new Guid("ffeeddcc-bbaa-9988-7766-554433221100"),
                            SizeName = "S"
                        },
                        new
                        {
                            ID_Size = new Guid("eeddccbb-aa99-8877-6655-443322110000"),
                            SizeName = "M"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.ThanhToan", b =>
                {
                    b.Property<Guid>("ID_ThanhToan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaChi")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GhiChu")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HoTen")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ID_HoaDon")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhuongThucThanhToan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SDT")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<float>("SoTienThanhToan")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID_ThanhToan");

                    b.HasIndex("ID_HoaDon");

                    b.ToTable("ThanhToans");

                    b.HasData(
                        new
                        {
                            ID_ThanhToan = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            DiaChi = "Hà Nội",
                            GhiChu = "Thanh toán đơn hàng #1",
                            HoTen = "Tran Thi B",
                            ID_HoaDon = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            PhuongThucThanhToan = "Chuyển khoản",
                            SDT = "0912345678",
                            SoTienThanhToan = 150000f,
                            Status = "Đã thanh toán"
                        },
                        new
                        {
                            ID_ThanhToan = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            DiaChi = "Hà Nội",
                            GhiChu = "Thanh toán đơn hàng #2",
                            HoTen = "Nguyen Van A",
                            ID_HoaDon = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3a"),
                            PhuongThucThanhToan = "Chuyển khoản",
                            SDT = "0912345678",
                            SoTienThanhToan = 150000f,
                            Status = "Đã thanh toán"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.TonKho", b =>
                {
                    b.Property<Guid>("ID_TonKho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Spct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("NgayCapNhap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("SoLuongTonKho")
                        .HasColumnType("int");

                    b.HasKey("ID_TonKho");

                    b.HasIndex("ID_Spct");

                    b.ToTable("TonKhos");

                    b.HasData(
                        new
                        {
                            ID_TonKho = new Guid("bbbbbbbb-cccc-dddd-eeee-ffffffffffff"),
                            ID_Spct = new Guid("a0e6c70b-6c4a-4b9e-9d2a-0a4a8b0e7a2b"),
                            NgayCapNhap = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SoLuongTonKho = 50
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.HasKey("Username");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "testuser",
                            IsActive = true,
                            Password = "jZae727K08KaOmKSgOaGzww/XVqGr/PKEgIMkjrcbJI=",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.User_KhachHang", b =>
                {
                    b.Property<Guid>("ID_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_User");

                    b.HasIndex("UserName");

                    b.HasIndex("HoTen", "Email");

                    b.ToTable("User_KhachHangs");

                    b.HasData(
                        new
                        {
                            ID_User = new Guid("ae0f3e6e-21a4-4f5b-9d2c-8a7e6f5d4c3b"),
                            Email = "khachhangB@gmail.com",
                            HoTen = "Tran Thi B ",
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("AuthDemo.Models.Admin", b =>
                {
                    b.HasOne("AuthDemo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthDemo.Models.AnhSp", b =>
                {
                    b.HasOne("AuthDemo.Models.SanPhamChiTiet", "SanPhamChiTiet")
                        .WithMany()
                        .HasForeignKey("ID_Spct")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SanPhamChiTiet");
                });

            modelBuilder.Entity("AuthDemo.Models.BaoCao", b =>
                {
                    b.HasOne("AuthDemo.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("HoTenAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("AuthDemo.Models.DonHang", b =>
                {
                    b.HasOne("AuthDemo.Models.NhanVien", "NhanVien")
                        .WithMany()
                        .HasForeignKey("MaNV")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("AuthDemo.Models.Don_Hang_Thanh_Toan", b =>
                {
                    b.HasOne("AuthDemo.Models.DonHang", "DonHang")
                        .WithMany()
                        .HasForeignKey("ID_Don_Hang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.ThanhToan", "ThanhToan")
                        .WithMany()
                        .HasForeignKey("ID_ThanhToan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonHang");

                    b.Navigation("ThanhToan");
                });

            modelBuilder.Entity("AuthDemo.Models.GiaoHang", b =>
                {
                    b.HasOne("AuthDemo.Models.DonHang", "DonHang")
                        .WithMany()
                        .HasForeignKey("ID_Don_Hang")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthDemo.Models.ThanhToan", "ThanhToan")
                        .WithMany()
                        .HasForeignKey("ID_ThanhToan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DonHang");

                    b.Navigation("ThanhToan");
                });

            modelBuilder.Entity("AuthDemo.Models.Gio_Hang", b =>
                {
                    b.HasOne("AuthDemo.Models.User_KhachHang", "User_KhachHang")
                        .WithMany()
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_KhachHang");
                });

            modelBuilder.Entity("AuthDemo.Models.Gio_Hang_Chi_Tiet", b =>
                {
                    b.HasOne("AuthDemo.Models.Gio_Hang", "Gio_Hang")
                        .WithMany()
                        .HasForeignKey("ID_Gio_Hang")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.SanPhamChiTiet", "SanPhamChiTiet")
                        .WithMany()
                        .HasForeignKey("ID_Spct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.KhuyenMai", "KhuyenMai")
                        .WithMany()
                        .HasForeignKey("Ma_Km")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Gio_Hang");

                    b.Navigation("KhuyenMai");

                    b.Navigation("SanPhamChiTiet");
                });

            modelBuilder.Entity("AuthDemo.Models.HoTroKhachHang", b =>
                {
                    b.HasOne("AuthDemo.Models.User_KhachHang", "User_KhachHang")
                        .WithMany()
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.NhanVien", "NhanVien")
                        .WithMany()
                        .HasForeignKey("MaNV")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NhanVien");

                    b.Navigation("User_KhachHang");
                });

            modelBuilder.Entity("AuthDemo.Models.HoaDon", b =>
                {
                    b.HasOne("AuthDemo.Models.User_KhachHang", "User_KhachHang")
                        .WithMany()
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_KhachHang");
                });

            modelBuilder.Entity("AuthDemo.Models.KhachHang", b =>
                {
                    b.HasOne("AuthDemo.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("HoTenAdmin")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthDemo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthDemo.Models.KhuyenMai", b =>
                {
                    b.HasOne("AuthDemo.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("HoTenAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("AuthDemo.Models.NCC", b =>
                {
                    b.HasOne("AuthDemo.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("HoTenAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("AuthDemo.Models.NhanVien", b =>
                {
                    b.HasOne("AuthDemo.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("HoTenAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthDemo.Models.SanPhamChiTiet", b =>
                {
                    b.HasOne("AuthDemo.Models.ChatLieu", "ChatLieu")
                        .WithMany()
                        .HasForeignKey("ID_ChatLieu")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthDemo.Models.HangSX", "HangSX")
                        .WithMany()
                        .HasForeignKey("ID_Hang")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthDemo.Models.MauSac", "MauSac")
                        .WithMany()
                        .HasForeignKey("ID_MauSac")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthDemo.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("ID_Size")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AuthDemo.Models.SanPham", "SanPham")
                        .WithMany()
                        .HasForeignKey("ID_Sp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatLieu");

                    b.Navigation("HangSX");

                    b.Navigation("MauSac");

                    b.Navigation("SanPham");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("AuthDemo.Models.SanPhamYeuThich", b =>
                {
                    b.HasOne("AuthDemo.Models.User_KhachHang", "User_KhachHang")
                        .WithMany()
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_KhachHang");
                });

            modelBuilder.Entity("AuthDemo.Models.SanPhamYeuThichChiTiet", b =>
                {
                    b.HasOne("AuthDemo.Models.SanPhamChiTiet", "SanPhamChiTiet")
                        .WithMany()
                        .HasForeignKey("ID_Spct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.SanPhamYeuThich", "SanPhamYeuThich")
                        .WithMany()
                        .HasForeignKey("ID_Spyt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPhamChiTiet");

                    b.Navigation("SanPhamYeuThich");
                });

            modelBuilder.Entity("AuthDemo.Models.SanPham_Mua", b =>
                {
                    b.HasOne("AuthDemo.Models.SanPhamChiTiet", "SanPhamChiTiet")
                        .WithMany()
                        .HasForeignKey("ID_Spct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.KhuyenMai", "KhuyenMai")
                        .WithMany()
                        .HasForeignKey("Ma_Km")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KhuyenMai");

                    b.Navigation("SanPhamChiTiet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthDemo.Models.SanPham_ThanhToan", b =>
                {
                    b.HasOne("AuthDemo.Models.SanPhamChiTiet", "SanPhamChiTiet")
                        .WithMany()
                        .HasForeignKey("ID_Spct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.ThanhToan", "ThanhToan")
                        .WithMany()
                        .HasForeignKey("ID_ThanhToan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPhamChiTiet");

                    b.Navigation("ThanhToan");
                });

            modelBuilder.Entity("AuthDemo.Models.ThanhToan", b =>
                {
                    b.HasOne("AuthDemo.Models.HoaDon", "HoaDon")
                        .WithMany()
                        .HasForeignKey("ID_HoaDon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HoaDon");
                });

            modelBuilder.Entity("AuthDemo.Models.TonKho", b =>
                {
                    b.HasOne("AuthDemo.Models.SanPhamChiTiet", "SanPhamChiTiet")
                        .WithMany()
                        .HasForeignKey("ID_Spct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPhamChiTiet");
                });

            modelBuilder.Entity("AuthDemo.Models.User", b =>
                {
                    b.HasOne("AuthDemo.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthDemo.Models.User_KhachHang", b =>
                {
                    b.HasOne("AuthDemo.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthDemo.Models.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("HoTen", "Email")
                        .HasPrincipalKey("HoTen", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KhachHang");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthDemo.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
